
Using Python 3.12.3 environment at: /usr
error: The interpreter at /usr is externally managed, and indicates the following:

  To install Python packages system-wide, try apt install
  python3-xyz, where xyz is the package you are trying to
  install.

  If you wish to install a non-Debian-packaged Python package,
  create a virtual environment using python3 -m venv path/to/venv.
  Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make
  sure you have python3-full installed.

  If you wish to install a non-Debian packaged Python application,
  it may be easiest to use pipx install xyz, which will manage a
  virtual environment for you. Make sure you have pipx installed.

  See /usr/share/doc/python3.12/README.venv for more information.

Consider creating a virtual environment with `uv venv`.
Error: Process completed with exit code 2.


name: gamache CI/CD (uv)
on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  release:
    types: [ published ]
  schedule:
    - cron: "0 6 * * 1"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_DEFAULT: "3.12"
  PACKAGE_NAME: "gamache"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  COVERAGE_MIN: "85"

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python "3.12"
      - name: Install dev tools
        run: |
          uv pip install --system ruff==0.5.* black==24.* isort==5.* pre-commit
      - name: Run pre-commit on changed files
        uses: pre-commit/action@v3.0.1

  types:
    name: Static Typing (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python "3.12"
      - name: Install mypy & project (editable)
        run: |
          uv pip install --system mypy==1.* types-requests types-PyYAML
          uv pip install --system -e .
      - name: Run mypy
        run: uv run mypy --strict --install-types --non-interactive .

  test:
    name: Tests â€¢ Python ${{ matrix.py }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: ${{ matrix.py }}
      - name: Create venv
        run: uv venv --python "3.12"
      - name: Install test deps
        run: uv pip install --system -e .[test] pytest pytest-cov
      - name: Run pytest with coverage
        run: |
          uv run pytest -q \
            --maxfail=1 \
            --cov=gamache \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=$COVERAGE_MIN
      - name: Upload coverage.xml artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.py }}.xml
          path: coverage.xml
          if-no-files-found: error
      # Codecov step (optional)
      - name: Upload to Codecov (optional)
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: py${{ matrix.py }}
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python "3.12"
      - name: Install audit tools
        run: uv pip install --system pip-audit bandit
      - name: pip-audit (dependencies)
        run: |
          if [ -f requirements.txt ]; then
            uv run pip-audit -r requirements.txt || true
          else
            uv run pip-audit -s || true
          fi
      - name: Bandit (source code security)
        run: uv run bandit -q -r $GITHUB_WORKSPACE -x tests

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, types, test, security]
    if: |
      github.event_name != 'pull_request' &&
      (startsWith(github.ref, 'refs/heads/') || github.event_name == 'release' || github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python "3.12"
      - name: Build sdist & wheel
        run: |
          uv pip install --system build twine
          uv run python -m build
          uv run twine check dist/*
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  containerize:
    name: Build & Push Container (Buildah)
    runs-on: ubuntu-latest
    needs: [lint, types, test, security]
    if: |
      github.event_name != 'pull_request' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'release' || github.event_name == 'workflow_dispatch')
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: ${{ github.sha }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Buildah & Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman buildah
          buildah info

      - name: Log in to GHCR
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login "$REGISTRY" -u ${{ github.actor }} --password-stdin

      - name: Build image with Buildah
        run: |
          IMAGE_REF="$REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
          buildah bud --layers -t "$IMAGE_REF" -f Dockerfile .
          echo "IMAGE_REF=$IMAGE_REF" >> $GITHUB_ENV

      - name: Tag release-friendly latest or tag
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then TAG=${GITHUB_REF#refs/tags/}; else TAG=latest; fi
          buildah tag "$IMAGE_REF" "$REGISTRY/$IMAGE_NAME:$TAG"

      - name: Push images to registry
        run: |
          buildah push "$IMAGE_REF" "docker://$IMAGE_REF"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then TAG=${GITHUB_REF#refs/tags/}; else TAG=latest; fi
          buildah push "$IMAGE_REF" "docker://$REGISTRY/$IMAGE_NAME:$TAG"
  docs_check:
    name: Docs Build (MkDocs)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: "3.12"
      - name: Create venv
        run: uv venv --python "3.12"
      - name: Install docs deps
        run: |
          uv pip install --system -e .[docs]
      - name: Build docs (strict)
        run: |
          uv run mkdocs build --strict